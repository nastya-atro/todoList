{"version":3,"sources":["components/Badge/Badge.tsx","api.axios/api.ts","redux-store/listsRuducer.ts","components/List/List.tsx","redux-store/listsSelector.tsx","components/AddList/AddButtonList.tsx","components/AddTasksForm/AddTasksForm.tsx","components/Tasks/Tasks.tsx","redux-store/redux-store.ts","App.tsx","index.js","components/Tasks/Tasks.module.css","components/AddList/AddList.module.css","components/Badge/Badge.module.css","components/List/List.module.css"],"names":["Badge","props","onClick","style","backgroundColor","colors","className","cn","s","active","badge","instanse","axios","create","baseURL","todoListApi","get","then","res","data","id","delete","idTaskObj","newTaskText","patch","text","taskId","completed","name","colorId","post","newTask","listId","initialState","lists","activeItem","isFetching","actions","type","newList","taskObj","title","taskObjId","setLists","dispatch","a","listsReducer","state","action","filter","map","item","tasks","task","list","useStyles","makeStyles","theme","createStyles","root","maxWidth","marginTop","avatar","List","useDispatch","onRemove","Card","items","index","CardHeader","onClickItem","noactive","Avatar","aria-label","icon","color","charAt","toUpperCase","IconButton","isRemovable","subheader","length","listsSelector","colorsSelector","activeItemSelector","isFetchingSelector","button","margin","spacing","width","input","AddList","classes","useState","isPopup","setPopup","activeColor","setActiveColor","inputValue","setInputValue","useSelector","visiblePopup","useEffect","Array","isArray","add_list","Paper","icon_close","noValidate","autoComplete","TextField","label","variant","onChange","e","currentTarget","value","add_list_popup_colors","Button","newObj","addNewListThunk","alert","startIcon","input_button","input_buttons","marginLeft","AddTasksForm","visibleForm","setVisibleForm","toogleVisibleForm","elevation","tasks_form","addNewTaskThunk","tasks_header_text","aligItem","todo_main_tasks_block","padding","Tasks","changeTasks","onRemoveTask","removeTaskThunk","changeTaskText","window","prompt","changeTaskTextThunk","onCompleteTask","changeSelectTaskThunk","todo_main_tasks","to","tasks_header_tpaper","Typography","newTitle","todo_main_tasks_title","hex","FormControlLabel","control","Checkbox","checked","target","todo_main_input_block","withoutInput","onBlur","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","appbar","height","todo_main","marginBottom","todo_main_all_tasks","appbar_text","AppC","withRouter","history","useHistory","location","useLocation","pathname","split","find","Number","Box","Container","AppBar","position","Grid","container","xs","push","exact","path","AppContainer","MainApp","basename","process","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c3f83d36.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './Badge.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PropsType={\r\n    onClick?:()=>void\r\n    colors: string\r\n    className: string | false\r\n}\r\n\r\nconst Badge:React.FC<PropsType>=(props)=> <i onClick={props.onClick} style={{backgroundColor: props.colors}} \r\nclassName={cn({[s.active]:props.className}, s.badge)}></i>\r\n\r\nexport default Badge","import axios from \"axios\";\r\nimport { TastsType } from \"../redux-store/listsRuducer\";\r\n\r\n//used fake json-server - 'assets/db.json'\r\n\r\nconst instanse= axios.create({\r\n    baseURL: `http://localhost:3001/`\r\n})\r\n\r\nexport const todoListApi={\r\n    getLists(){\r\n        return instanse.get(`lists?_expand=color&_embed=tasks`).then(res => res.data)\r\n    },\r\n    getColors(){\r\n        return instanse.get(`colors`).then(res => res.data)\r\n    },\r\n    deleteTask(id:number){\r\n        return instanse.delete(`tasks/${id}`).then(res => res.data)\r\n    },\r\n    changeTaskText(idTaskObj:number, newTaskText:string){\r\n        return instanse.patch(`tasks/${idTaskObj}`, { text: newTaskText }).then(res => res.data)\r\n    },\r\n    changeSelectTask(taskId:number, completed:boolean){\r\n        return instanse.patch(`tasks/${taskId}`, {completed}).then(res => res.data)\r\n    },\r\n    addNewList(name:string, colorId:number){\r\n        return instanse.post(`lists`, {name, colorId}).then(res => res.data)\r\n    },\r\n    addNewTask(newTask: TastsType){\r\n        return instanse.post(`tasks`, newTask).then(res => res.data)\r\n    },\r\n    deleteList(id:number){\r\n        return instanse.delete(`lists/`+ id).then(res => res.data)\r\n    },\r\n    changeTitleList(listId:number, name: string){\r\n        return instanse.patch(`lists/${listId}`, { name }).then(res => res.data)\r\n    }\r\n}\r\n","import { todoListApi } from \"../api.axios/api\"\r\nimport { CommonActionsTypes, CommonThunkType } from \"./redux-store\"\r\n\r\nlet initialState = {\r\n    lists: [] as Array<ListsType>,\r\n    colors: null as null | Array<ColorsType>,\r\n    activeItem: null as any,\r\n    isFetching: false\r\n}\r\n\r\nexport type ListsType = {\r\n    id: number\r\n    name: string,\r\n    colorId: number,\r\n    tasks: Array<TastsType>,\r\n    color: Array<ColorsType>\r\n}\r\nexport type TastsType = {\r\n    id?: number,\r\n    listId: number,\r\n    text: string,\r\n    completed: boolean\r\n}\r\n\r\nexport type ColorsType = {\r\n    id: number,\r\n    hex: string,\r\n    name: string\r\n}\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst listsReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_LISTS':\r\n            return {\r\n                ...state,\r\n                lists: action.lists\r\n\r\n            }\r\n        case 'SET_COLORS':\r\n            return {\r\n                ...state,\r\n                colors: action.colors\r\n\r\n            }\r\n        case 'SET_ACTIVE_ITEM':\r\n            return {\r\n                ...state,\r\n                activeItem: action.activeItem\r\n            }\r\n        case 'ADD_NEW_LIST':\r\n            return {\r\n                ...state,\r\n                lists: [...state.lists, action.newList]\r\n            }\r\n\r\n        case 'TOOGLE_IS_FETCHING':\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case 'REMOVE_LIST':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.filter(lists =>\r\n                    lists.id !== action.listId\r\n                )\r\n            }\r\n        case 'ADD_NEW_TASK':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(item => {\r\n                    if (item.id === action.listId) {\r\n                        item.tasks = [...item.tasks, action.taskObj]\r\n                    }\r\n                    return item\r\n                })\r\n            }\r\n        case 'REMOVE_TASK':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(item => {\r\n                    if (item.id === action.listId) {\r\n                        item.tasks = item.tasks.filter(task => task.id !== action.taskId)\r\n                    }\r\n                    return item\r\n                })\r\n            }\r\n\r\n        case 'CHANGE_TITLE_TASK':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(item => {\r\n                    if (item.id === action.id) {\r\n                        item.name = action.title\r\n                    }\r\n                    return item\r\n                })\r\n            }\r\n\r\n        case 'CHANGE_TASK_TEXT':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map((list) => {\r\n                    if (list.id === action.listId) {\r\n                        list.tasks = list.tasks.map((task) => {\r\n                            if (task.id === action.taskObjId) {\r\n                                task.text = action.newTaskText\r\n                            }\r\n                            return task\r\n                        })\r\n                    }\r\n                    return list\r\n                })\r\n            }\r\n\r\n        case 'CHANGE_SELECT_TASK':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map((list) => {\r\n                    if (list.id === action.listId) {\r\n                        list.tasks = list.tasks.map((task) => {\r\n                            if (task.id === action.taskId) {\r\n                                task.completed = action.completed\r\n                            }\r\n                            return task\r\n                        })\r\n                    }\r\n                    return list\r\n                })\r\n            }\r\n        default: return state\r\n\r\n\r\n    }\r\n}\r\n\r\ntype ActionsTypes = CommonActionsTypes<typeof actions>\r\ntype ThunkType = CommonThunkType<ActionsTypes>\r\n\r\n\r\nexport const actions = {\r\n    setListsAction: (lists: Array<ListsType>) => ({\r\n        type: 'SET_LISTS', lists\r\n    } as const),\r\n\r\n    setColorsAction: (colors: Array<ColorsType>) => ({\r\n        type: 'SET_COLORS', colors\r\n    } as const),\r\n \r\n    setActiveItemAction: (activeItem: any) => ({\r\n        type: 'SET_ACTIVE_ITEM', activeItem\r\n    } as const),\r\n\r\n    addNewListAction: (newList: ListsType) => ({\r\n        type: 'ADD_NEW_LIST', newList\r\n    } as const),\r\n\r\n    toogleIsFetchingAction: (isFetching: boolean) => ({\r\n        type: 'TOOGLE_IS_FETCHING', isFetching\r\n    } as const),\r\n\r\n    removeListAction: (listId: number) => ({\r\n        type: 'REMOVE_LIST', listId\r\n    } as const),\r\n\r\n    addNewTaskAction: (listId: number, taskObj: TastsType) => ({\r\n        type: 'ADD_NEW_TASK', listId, taskObj\r\n    } as const),\r\n\r\n    removeTaskAction: (listId: number, taskId: number) => ({\r\n        type: 'REMOVE_TASK', listId, taskId\r\n    } as const),\r\n\r\n    changeTitleItemAction: (id: number, title: string) => ({\r\n        type: 'CHANGE_TITLE_TASK', id, title\r\n    } as const),\r\n\r\n    changeTaskTextAction: (listId: number, taskObjId: number, newTaskText: string) => ({\r\n        type: 'CHANGE_TASK_TEXT', listId, taskObjId, newTaskText\r\n    } as const),\r\n\r\n    changeSelectTaskAction: (listId: number, taskId: number, completed: boolean) => ({\r\n        type: 'CHANGE_SELECT_TASK', listId, taskId, completed\r\n    } as const),\r\n\r\n}\r\n\r\n\r\n\r\nexport const setLists = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await todoListApi.getLists()\r\n        dispatch(actions.setListsAction(data))\r\n    }\r\n}\r\n\r\nexport const setColors = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await todoListApi.getColors()\r\n        dispatch(actions.setColorsAction(data))\r\n        \r\n    }\r\n}\r\n\r\nexport const addNewListThunk = (inputValue: string, activeColor: number, color: ColorsType | null): ThunkType => {\r\n\r\n    return async (dispatch) => {\r\n        dispatch(actions.toogleIsFetchingAction(true))\r\n        \r\n        const data = await todoListApi.addNewList(inputValue, activeColor)\r\n       \r\n        const newObj = { ...data, color, tasks: [] }\r\n        dispatch(setLists())\r\n        dispatch(actions.toogleIsFetchingAction(false))\r\n        dispatch(actions.addNewListAction(newObj))\r\n    }\r\n}\r\n\r\nexport const removeListThunk = (listId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await todoListApi.deleteList(listId)\r\n        dispatch(setLists())\r\n        dispatch(actions.removeListAction(listId))\r\n    }\r\n}\r\n\r\nexport const addNewTaskThunk = (newTask: TastsType, listId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.toogleIsFetchingAction(true))\r\n        const data = await todoListApi.addNewTask(newTask)\r\n        dispatch(setLists())\r\n        dispatch(actions.addNewTaskAction(listId, data))\r\n        dispatch(actions.toogleIsFetchingAction(false))\r\n    }\r\n}\r\n\r\nexport const removeTaskThunk = (listId: number, taskId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.removeTaskAction(listId, taskId))\r\n       \r\n        await todoListApi.deleteTask(taskId)\r\n    }\r\n}\r\n\r\nexport const changeTitleItemThunk = (id: number, title: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.changeTitleItemAction(id, title))\r\n        await todoListApi.changeTitleList(id, title)\r\n    }\r\n}\r\n\r\nexport const changeTaskTextThunk = (listId: number, taskObjId: number, newTaskText: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.changeTaskTextAction(listId, taskObjId, newTaskText))\r\n        \r\n        await todoListApi.changeTaskText(taskObjId, newTaskText)\r\n    }\r\n}\r\n\r\nexport const changeSelectTaskThunk = (listId: number, taskId: number, completed: boolean): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.changeSelectTaskAction(listId, taskId, completed))\r\n        await todoListApi.changeSelectTask(taskId, completed)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default listsReducer","import React from 'react';\r\nimport cn from 'classnames'\r\nimport Badge from '../Badge/Badge';\r\nimport s from './List.module.css'\r\nimport { useDispatch } from 'react-redux';\r\nimport { ListsType, removeListThunk } from '../../redux-store/listsRuducer';\r\nimport { Avatar, Card, CardHeader, createStyles, IconButton, makeStyles } from '@material-ui/core';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { Theme } from '@material-ui/core/styles';\r\nimport { red } from '@material-ui/core/colors';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            maxWidth: 345,\r\n            marginTop: 20\r\n        },\r\n        avatar: {\r\n            backgroundColor: 'white'\r\n        },\r\n    }),\r\n);\r\n\r\ntype PropsType = {\r\n    onClick?: () => void\r\n    items: Array<OllTask> | Array<ListsType>\r\n    onClickItem: (list: ListsType) => void\r\n    activeItem?: ListsType\r\n    isRemovable?: boolean\r\n}\r\n\r\ntype OllTask = {\r\n    icon: any\r\n    name: string\r\n}\r\n\r\nconst List: React.FC<PropsType> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onRemove = (item: ListsType) => {\r\n        dispatch(removeListThunk(item.id))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card onClick={props.onClick} className='todo__list'>\r\n                {props.items.map((item: any, index: number) =>\r\n\r\n                    <CardHeader onClick={() => { props.onClickItem(item) }}\r\n                        key={index}\r\n                        className={cn(item.noactive, { active: props.activeItem && props.activeItem.id === item.id })+''+s.filter}\r\n                        avatar={\r\n                            <Avatar aria-label=\"recipe\" style={{backgroundColor:!item.icon?  item.color.name: 'grey'}}>\r\n                                {item.icon? item.icon:item.name.charAt(0).toUpperCase()}\r\n                            </Avatar>\r\n                        }\r\n                        action={\r\n                            <IconButton aria-label=\"settings\">\r\n                                  {props.isRemovable ?\r\n                                <CloseIcon onClick={() => onRemove(item)}/>: null}\r\n                            </IconButton>\r\n                        }\r\n                        title={item.name}\r\n                        subheader={item.tasks && `${item.tasks.length} task`}\r\n                    >      \r\n                    </CardHeader>)}\r\n            </Card>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default List","import { AppStateType } from \"./redux-store\"\r\n\r\n\r\nexport const listsSelector=(state: AppStateType)=>{\r\n    return state.lists.lists\r\n}\r\nexport const colorsSelector=(state: AppStateType)=>{\r\n    return state.lists.colors\r\n}\r\nexport const activeItemSelector=(state: AppStateType)=>{\r\n    return state.lists.activeItem\r\n}\r\nexport const isFetchingSelector=(state: AppStateType)=>{\r\n    return state.lists.isFetching\r\n}\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport Badge from '../Badge/Badge';\r\nimport List from '../List/List';\r\nimport s from './AddList.module.css'\r\nimport { addNewListThunk, ColorsType } from '../../redux-store/listsRuducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { isFetchingSelector } from '../../redux-store/listsSelector';\r\nimport { Button, createStyles, IconButton, makeStyles, Paper } from '@material-ui/core';\r\nimport { Theme } from '@material-ui/core/styles';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\r\n\r\n \r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            maxWidth: 345,\r\n            marginTop: 15,\r\n            backgroundColor: 'rgba(240, 241, 241, 0.432)'\r\n        },\r\n        avatar: {\r\n            backgroundColor: 'white'\r\n        },\r\n        button: {\r\n            margin: theme.spacing(1),\r\n            width: '95%'\r\n        },\r\n        input: {\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n                width: '95%'\r\n            },\r\n        },\r\n    }), \r\n);\r\n\r\ntype PropsType = {\r\n    colors: Array<ColorsType> | null\r\n}\r\n\r\nconst AddList: React.FC<PropsType> = ({ colors }) => {\r\n\r\n    const classes = useStyles();\r\n    const [isPopup, setPopup] = useState(false)\r\n    const [activeColor, setActiveColor] = useState(3)\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const isFetching = useSelector(isFetchingSelector)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let visiblePopup = () => {\r\n        setPopup(!isPopup)\r\n    }\r\n    const onClose = () => {\r\n        setPopup(false)\r\n        setInputValue('')\r\n        colors && setActiveColor(colors[0].id)\r\n\r\n    }\r\n    useEffect(() => {\r\n        if (Array.isArray(colors)) {\r\n            setActiveColor(colors[0].id);\r\n        }\r\n    }, [colors])\r\n\r\n    const addNewList = () => {\r\n        if (!inputValue) {\r\n            alert('Введите название списка')\r\n            return\r\n        }\r\n        const color = colors && colors.filter(color => color.id === activeColor)[0]\r\n        dispatch(addNewListThunk(inputValue, activeColor, color))\r\n    }\r\n\r\n    return (\r\n        <div className={s.add_list}>\r\n            <List onClickItem={visiblePopup} onClick={visiblePopup} items={[{ icon: <i className=\"fas fa-plus\"></i>, name: 'Add new List' }]} />\r\n\r\n            {isPopup ?\r\n                <Paper className={classes.root}>\r\n                    <span className='popup'>\r\n                    <IconButton className={s.icon_close}>\r\n                        <CloseIcon onClick={onClose} />\r\n                    </IconButton>\r\n                    <form className={classes.input} noValidate autoComplete=\"off\">\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"Write name of list...\"\r\n                            variant=\"outlined\"\r\n                            onChange={(e) => { setInputValue(e.currentTarget.value) }}\r\n                            value={inputValue}\r\n                            type='text' />\r\n                    </form>\r\n                    <div className={s.add_list_popup_colors}>\r\n\r\n                        {colors && colors.map(color => (\r\n                            <Badge\r\n                                className={activeColor === color.id && s.active}\r\n                                onClick={() => setActiveColor(color.id)}\r\n                                key={color.id}\r\n                                colors={color.name} />))}\r\n                    </div>\r\n                    <Button onClick={addNewList} variant=\"contained\" color=\"default\" className={classes.button} startIcon={<BookmarkBorderIcon />}>\r\n                        {isFetching ? 'Loading...' : 'Save list'}\r\n                    </Button>\r\n                    </span>\r\n                </Paper> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddList","import React, { useState } from 'react';\r\nimport s from './AddTasksForm.module.css'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addNewTaskThunk, ListsType } from '../../redux-store/listsRuducer';\r\nimport { isFetchingSelector } from '../../redux-store/listsSelector';\r\nimport { Paper, IconButton, makeStyles, createStyles, Button, Grid } from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Theme } from '@material-ui/core/styles';\r\n\r\ntype PropsType = {\r\n    list: ListsType\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        input_button: {\r\n            marginTop: 10,\r\n            backgroundColor: '#f1f0f067;'\r\n        },\r\n        input_buttons: {\r\n            marginLeft: 10\r\n        },\r\n\r\n        input: {\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n                width: '95%'\r\n            },\r\n        },\r\n    }),\r\n);\r\n \r\n\r\nconst AddTasksForm: React.FC<PropsType> = ({ list }) => {\r\n    const classes = useStyles();\r\n    const [visibleForm, setVisibleForm] = useState(true)\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const isFetching = useSelector(isFetchingSelector)\r\n    const dispatch = useDispatch()\r\n\r\n    const toogleVisibleForm = () => {\r\n        if (!isFetching) {\r\n            setVisibleForm(!visibleForm)\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    const addNewTaskItem = () => {\r\n        const newTask = {\r\n            \"listId\": list.id,\r\n            \"text\": inputValue,\r\n            \"completed\": false\r\n        }\r\n        dispatch(addNewTaskThunk(newTask, list.id))\r\n        toogleVisibleForm()\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={0} className={s.tasks_form}>\r\n            {visibleForm ?\r\n                <div className='button' onClick={toogleVisibleForm}>\r\n                    <IconButton className={s.icon_close}>\r\n                        <AddCircleIcon />\r\n                    </IconButton>\r\n                    <span>Add new task</span>\r\n                </div> :\r\n                <div className='form_new_task'>\r\n                    <form className={classes.input} noValidate autoComplete=\"off\">\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"New task text...\"\r\n                            variant=\"outlined\"\r\n                            onChange={(e: any) => { setInputValue(e.currentTarget.value) }}\r\n                            value={inputValue}\r\n                            type='text' />\r\n                    </form>\r\n\r\n                    <div className={classes.input_buttons}>\r\n\r\n                        <Button onClick={addNewTaskItem} variant=\"contained\" color=\"default\" >\r\n                            {!isFetching ? 'Add task' : 'Adding...'}\r\n                        </Button>\r\n                        <div>\r\n                            <Button className={classes.input_button} onClick={toogleVisibleForm} variant=\"contained\" color=\"default\" >\r\n                                Cancel\r\n                    </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default AddTasksForm","import React, { Fragment, useState } from 'react';\r\nimport s from './Tasks.module.css'\r\nimport AddTasksForm from './../AddTasksForm/AddTasksForm';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeTaskThunk, changeTitleItemThunk, changeTaskTextThunk, changeSelectTaskThunk } from '../../redux-store/listsRuducer';\r\nimport { Typography, makeStyles, Paper, FormControlLabel, Checkbox, IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\ntype PropsType = {\r\n    list: any\r\n    withoutInput: boolean\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    tasks_header_text: {\r\n        aligItem: 'center'\r\n    },\r\n    todo_main_tasks_block: {\r\n        padding: theme.spacing(2)\r\n\r\n    }\r\n}))\r\n\r\nconst Tasks: React.FC<PropsType> = (props) => {\r\n    const classes = useStyles();\r\n    let [tasks, changeTasks] = useState(true)\r\n    const dispatch = useDispatch()\r\n\r\n    const changeTitleItem = () => {\r\n        const newTitle = window.prompt('Write new title', props.list.name)\r\n        if (!newTitle) { return }\r\n        dispatch(changeTitleItemThunk(props.list.id, newTitle))\r\n    }\r\n\r\n    const onRemoveTask = (listId: number, taskId: number) => {\r\n        dispatch(removeTaskThunk(listId, taskId))\r\n    }\r\n\r\n    const changeTaskText = (listId: number, taskObj: { id: number, text: string }) => {\r\n        const newTaskText = window.prompt('Rewrite your task', taskObj.text)\r\n        if (!newTaskText) { return }\r\n        dispatch(changeTaskTextThunk(listId, taskObj.id, newTaskText))\r\n    }\r\n\r\n    const onCompleteTask = (listId: number, taskId: number, completed: boolean) => {\r\n        dispatch(changeSelectTaskThunk(listId, taskId, completed))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.todo_main_tasks}>\r\n            <Link className={s.tasks_header_text} to={`/lists/${props.list.id}`}>\r\n                <Paper elevation={0} className={s.tasks_header_tpaper}>\r\n                    <Typography variant='h6' onClick={changeTitleItem} className={s.todo_main_tasks_title} style={{ color: props.list.color.hex }}>\r\n                       <span className='name_list'>{props.list.name}</span>  </Typography>\r\n                </Paper>\r\n            </Link>\r\n            <div>\r\n                <div>\r\n                    {props.list.tasks && props.list.tasks.map((list: any) =>\r\n                        <Paper elevation={0} className={classes.todo_main_tasks_block} key={list.id}>\r\n                            <FormControlLabel control={<Checkbox checked={list.completed}\r\n                                onChange={(e) => { onCompleteTask(list.listId, list.id, e.target.checked) }} name=\"checkedA\" />}\r\n                                label={tasks ? list.text : null} />\r\n                            <Fragment>\r\n                                {tasks ?\r\n                                    <span className={s.todo_main_input_block}>\r\n\r\n                                        {!props.withoutInput &&\r\n                                            <Fragment>\r\n                                                <IconButton >\r\n                                                    <EditIcon onClick={() => { changeTaskText(list.listId, { id: list.id, text: list.text }) }} />\r\n                                                </IconButton>\r\n                                                <IconButton >\r\n                                                    <CloseIcon onClick={() => { onRemoveTask(list.listId, list.id) }} />\r\n                                                </IconButton>\r\n                                            </Fragment>\r\n                                        }\r\n                                    </span>\r\n                                    : <input type='text' onBlur={() => { changeTasks(true) }} />}\r\n                            </Fragment>\r\n                        </Paper>)}\r\n                </div>\r\n                <Paper elevation={0} className={classes.todo_main_tasks_block}>\r\n                    {props.list.tasks && props.list.tasks.length === 0 && <Typography variant='h6'>There are no current issues</Typography>}\r\n                </Paper>\r\n            </div>\r\n            <div>{!props.withoutInput && <AddTasksForm key={props.list.id} list={props.list} />}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks","import { Action, applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\"\r\nimport listsReducer from \"./listsRuducer\";\r\n\r\n\r\nlet rootReducer= combineReducers({\r\n    lists: listsReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type CommonActionsTypes<T> = T extends {[key: string]:(...args:any[])=> infer U }?U:never\r\nexport type CommonThunkType<A extends Action>= ThunkAction<Promise<void>, AppStateType, unknown, A>\r\n\r\n\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n \r\nexport default store","import React, { useEffect } from 'react';\nimport './App.css';\nimport AddList from './components/AddList/AddButtonList';\nimport List from './components/List/List';\nimport Tasks from './components/Tasks/Tasks';\nimport { Route, useHistory, useLocation, BrowserRouter, withRouter } from 'react-router-dom';\nimport { Provider, useDispatch, useSelector} from 'react-redux';\nimport { setColors, setLists, actions} from './redux-store/listsRuducer';\nimport { colorsSelector, listsSelector, activeItemSelector } from './redux-store/listsSelector';\nimport { AppBar, Box, Container, Grid, makeStyles, Typography } from '@material-ui/core';\nimport store from './redux-store/redux-store';\n\n\nconst useStyles = makeStyles((theme) => ({\n  appbar: {\n    height: 50\n  },\n  todo_main: {\n    marginTop: theme.spacing(10),\n    marginBottom: 50\n  },\n  todo_main_all_tasks: {\n    marginBottom: theme.spacing(2)\n  },\n  appbar_text: {\n    marginLeft: 150,\n    padding: 10\n  }\n})\n)\n\nconst App: React.FC = () => {\n\n  const classes = useStyles();\n  const lists = useSelector(listsSelector)\n  const colors = useSelector(colorsSelector)\n  const activeItem = useSelector(activeItemSelector)\n\n  const dispatch = useDispatch()\n\n  const history = useHistory();\n  const location = useLocation()\n\n  useEffect(() => {\n    dispatch(setLists())\n    dispatch(setColors())\n  }, [])\n\n  useEffect(() => {\n    const listId = location.pathname.split('lists/')[1]\n    if (lists) {\n      const list = lists.find(list => list.id === Number(listId))\n      dispatch(actions.setActiveItemAction(list))\n    }\n  }, [lists, location.pathname])\n\n  return (\n    <Box>\n      <Container maxWidth=\"lg\">\n        <AppBar position=\"fixed\" className={classes.appbar} style={{ backgroundColor: activeItem ? activeItem.color.hex : 'grey' }}>\n          <Typography className={classes.appbar_text} variant='h6'>ToDo - Create your perfect list :)</Typography>\n        </AppBar>\n\n        <Grid className={classes.todo_main} container spacing={2}>\n          <Grid item xs={5}>\n            <div className={classes.todo_main_all_tasks}>\n              <List\n                onClickItem={() =>history.push(`/`)  }\n                items={[{ icon: <i className=\"fas fa-align-justify\"></i>, name: 'All tasks' }]} />\n            </div>\n            {lists ?\n              <List onClickItem={(list) => history.push(`/lists/${list.id}`)}\n                activeItem={activeItem}\n                isRemovable\n                items={lists} /> : ('Loading...')} \n            <AddList colors={colors} />\n          </Grid>\n\n          <Grid item xs={7}>\n            <Route exact path='/'>{lists && lists.map((list) => <Tasks key={list.id} withoutInput list={list} />)}</Route>\n            <Route path='/lists/:id'>{lists && activeItem && <Tasks list={activeItem} withoutInput={false} />} </Route>\n          </Grid>\n        </Grid>\n      </Container>\n    </Box>\n  );\n}\n\nlet AppC = withRouter(App)\n\nconst AppContainer = () => {\n  return (\n    <AppC />\n  )\n}\n\nlet MainApp: React.FC = () => {\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n    </BrowserRouter>\n}\n\nexport default MainApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './App';\n\nReactDOM.render(\n    <MainApp />, document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasks_header_text\":\"Tasks_tasks_header_text__1c6JB\",\"tasks_header_tpaper\":\"Tasks_tasks_header_tpaper__1GtXF\",\"todo_main_tasks_title\":\"Tasks_todo_main_tasks_title__3E1ZA\",\"todo_main_icon_changes\":\"Tasks_todo_main_icon_changes__2g4rH\",\"todo_main_input_block\":\"Tasks_todo_main_input_block__3W7MR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"AddList_active__nSziQ\",\"add_list\":\"AddList_add_list__3WZ1V\",\"add_list_popup_close\":\"AddList_add_list_popup_close__2Y43A\",\"add_list_popup_colors\":\"AddList_add_list_popup_colors__3Ko_V\",\"icon_close\":\"AddList_icon_close__2Ejzi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badge\":\"Badge_badge__1NpMd\",\"active\":\"Badge_active__28G59\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo__list_remove\":\"List_todo__list_remove__2HeWc\",\"filter\":\"List_filter__1Jxe3\"};"],"sourceRoot":""}